# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WTLayerVisibilityCheckDialog
                                 A QGIS plugin
 Set Layer Visibility Check depends on Data Sets
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-01-11
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Alex Myltsev
        email                : alexmyltsev@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# My Import
from PyQt5.QtCore import *
from qgis.core import QgsProject, QgsDataSourceUri, QgsVectorLayer

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'wt_layer_visibility_check_dialog_base.ui'))


class WTLayerVisibilityCheckDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(WTLayerVisibilityCheckDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        
        self.setWindowModality(Qt.ApplicationModal)
        
        
        #type iface: QgsInterface
        self.iface = iface
        
        
        self.pushButton_1.clicked.connect(self.pushButton_1_click)
        self.pushButton_2.clicked.connect(self.pushButton_2_click)
        
        self.layer_set_1 = [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11]
        self.layer_set_2 = [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
        
        self.layer_id_list = []
        self.layer_name_list = ['WKOL', 'WZADV', 'ABON', 'WUCH', 'WNSV', 'WDAT', 'WUCH_GRAF', 'WUCH_MAGISTRAL', 'WUCH_TABKOLCO', 'UL', 'building_polygon', 'map_sheet', 'chamber', 'canalization', 'communication', 'electrical_cable', 'electrical_line', 'gas', 'thermal', 'border', 'border_city', 'building', 'street_name', 'horizontal', 'map_frame']
        for layer_name in self.layer_name_list:
            for layer_id in QgsProject.instance().mapLayers():
                if layer_name == QgsDataSourceUri(QgsProject.instance().mapLayer(layer_id).dataProvider().dataSourceUri()).table():
                    self.layer_id_list.append(layer_id)
        #print (self.layer_id_list)
    
    
    def closeEvent(self, event):
        try:
           self.pushButton_1.clicked.disconnect(self.pushButton_1_click)
           self.pushButton_2.clicked.disconnect(self.pushButton_2_click)
        except:
            pass
        
        event.accept()
    
    
    def pushButton_1_click(self):
        self.layer_visibility_check(self.layer_set_2, False)
        self.layer_visibility_check(self.layer_set_1, True)
        
        # for set in self.set_2:
            # #layer = QgsProject.instance().mapLayersByName('ABON')[0]
            # node = QgsProject.instance().layerTreeRoot().findLayer(self.layer_id_list[set])
            # if node:
              # node.setItemVisibilityChecked(False)
    
    
    def pushButton_2_click(self):
        self.layer_visibility_check(self.layer_set_1, False)
        self.layer_visibility_check(self.layer_set_2, True)
        
        # for set in self.set_2:
            # #layer = QgsProject.instance().mapLayersByName('ABON')[0]
            # node = QgsProject.instance().layerTreeRoot().findLayer(self.layer_id_list[set])
            # if node:
              # node.setItemVisibilityChecked(True)


    def layer_visibility_check(self, arr, flag):
        for item in arr:
            #layer = QgsProject.instance().mapLayersByName('ABON')[0]
            node = QgsProject.instance().layerTreeRoot().findLayer(self.layer_id_list[item])
            if node:
              node.setItemVisibilityChecked(flag)